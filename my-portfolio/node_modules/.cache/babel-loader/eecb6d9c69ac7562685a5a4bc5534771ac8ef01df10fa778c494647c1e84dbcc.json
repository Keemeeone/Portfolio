{"ast":null,"code":"import * as React from 'react';\nimport React__default, { useState, useMemo, useRef, useCallback } from 'react';\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar isOffsetInPixels = function isOffsetInPixels(offset) {\n  return typeof offset === 'string' && offset.includes('px');\n};\nvar markerStyles = {\n  position: 'fixed',\n  left: 0,\n  width: '100%',\n  height: 0,\n  borderTop: '2px dashed black',\n  zIndex: 9999\n};\nvar offsetTextStyles = {\n  fontSize: '12px',\n  fontFamily: 'monospace',\n  margin: 0,\n  padding: 6\n};\nvar useTop = function useTop(offset) {\n  var offsetInPixels = isOffsetInPixels(offset);\n  if (offsetInPixels) {\n    return offset;\n  } else {\n    return \"\".concat(offset * 100, \"%\");\n  }\n};\nvar DebugOffset = function DebugOffset(_ref) {\n  var offset = _ref.offset;\n  var top = useTop(offset);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    style: _objectSpread2(_objectSpread2({}, markerStyles), {}, {\n      top: top\n    })\n  }, /*#__PURE__*/React__default.createElement(\"p\", {\n    style: offsetTextStyles\n  }, \"trigger: \", offset));\n};\nvar createThreshold = function createThreshold(theta, height) {\n  var count = Math.ceil(height / theta);\n  var t = [];\n  var ratio = 1 / count;\n  for (var i = 0; i <= count; i += 1) {\n    t.push(i * ratio);\n  }\n  return t;\n};\nvar Scrollama = function Scrollama(props) {\n  var debug = props.debug,\n    children = props.children,\n    _props$offset = props.offset,\n    offset = _props$offset === void 0 ? 0.3 : _props$offset,\n    _props$onStepEnter = props.onStepEnter,\n    onStepEnter = _props$onStepEnter === void 0 ? function () {} : _props$onStepEnter,\n    _props$onStepExit = props.onStepExit,\n    onStepExit = _props$onStepExit === void 0 ? function () {} : _props$onStepExit,\n    _props$onStepProgress = props.onStepProgress,\n    onStepProgress = _props$onStepProgress === void 0 ? null : _props$onStepProgress,\n    _props$threshold = props.threshold,\n    threshold = _props$threshold === void 0 ? 4 : _props$threshold;\n  var isOffsetDefinedInPixels = isOffsetInPixels(offset);\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    lastScrollTop = _useState2[0],\n    setLastScrollTop = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    windowInnerHeight = _useState4[0],\n    setWindowInnerHeight = _useState4[1];\n  var handleSetLastScrollTop = function handleSetLastScrollTop(scrollTop) {\n    setLastScrollTop(scrollTop);\n  };\n  var handleWindowResize = function handleWindowResize(e) {\n    setWindowInnerHeight(window.innerHeight);\n  };\n  React__default.useEffect(function () {\n    if (isOffsetDefinedInPixels) {\n      window.addEventListener('resize', handleWindowResize);\n      return function () {\n        window.removeEventListener('resize', handleWindowResize);\n      };\n    }\n  }, []);\n  var isBrowser = typeof window !== \"undefined\";\n  var innerHeight = isBrowser ? windowInnerHeight || window.innerHeight : 0;\n  var offsetValue = isOffsetDefinedInPixels ? +offset.replace('px', '') / innerHeight : offset;\n  var progressThreshold = useMemo(function () {\n    return createThreshold(threshold, innerHeight);\n  }, [innerHeight]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, debug && /*#__PURE__*/React__default.createElement(DebugOffset, {\n    offset: offset\n  }), React__default.Children.map(children, function (child, i) {\n    return /*#__PURE__*/React__default.cloneElement(child, {\n      scrollamaId: \"react-scrollama-\".concat(i),\n      offset: offsetValue,\n      onStepEnter: onStepEnter,\n      onStepExit: onStepExit,\n      onStepProgress: onStepProgress,\n      lastScrollTop: lastScrollTop,\n      handleSetLastScrollTop: handleSetLastScrollTop,\n      progressThreshold: progressThreshold,\n      innerHeight: innerHeight\n    });\n  }));\n};\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  const unobserve = React.useRef();\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n\n  callback.current = onChange;\n  const setRef = React.useCallback(node => {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n    if (skip) return;\n    if (node) {\n      unobserve.current = observe(node, (inView, entry) => {\n        setState({\n          inView,\n          entry\n        });\n        if (callback.current) callback.current(inView, entry);\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root,\n        rootMargin,\n        threshold,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay\n      }, fallbackInView);\n    }\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nvar useRootMargin = function useRootMargin(offset) {\n  return \"-\".concat(offset * 100, \"% 0px -\").concat(100 - offset * 100, \"% 0px\");\n};\nvar useProgressRootMargin = function useProgressRootMargin(direction, offset, node, innerHeight) {\n  if (!node.current) return '0px';\n  var offsetHeight = node.current.offsetHeight / innerHeight;\n  if (direction === 'down') return \"\".concat((offsetHeight - offset) * 100, \"% 0px \").concat(offset * 100 - 100, \"% 0px\");\n  return \"-\".concat(offset * 100, \"% 0px \").concat(offsetHeight * 100 - (100 - offset * 100), \"% 0px\");\n};\nvar Step = function Step(props) {\n  var children = props.children,\n    data = props.data,\n    handleSetLastScrollTop = props.handleSetLastScrollTop,\n    lastScrollTop = props.lastScrollTop,\n    _props$onStepEnter = props.onStepEnter,\n    onStepEnter = _props$onStepEnter === void 0 ? function () {} : _props$onStepEnter,\n    _props$onStepExit = props.onStepExit,\n    onStepExit = _props$onStepExit === void 0 ? function () {} : _props$onStepExit,\n    _props$onStepProgress = props.onStepProgress,\n    onStepProgress = _props$onStepProgress === void 0 ? null : _props$onStepProgress,\n    offset = props.offset,\n    scrollamaId = props.scrollamaId,\n    progressThreshold = props.progressThreshold,\n    innerHeight = props.innerHeight;\n  var isBrowser = typeof window !== \"undefined\";\n  var scrollTop = isBrowser ? document.documentElement.scrollTop : 0;\n  var direction = lastScrollTop < scrollTop ? 'down' : 'up';\n  var rootMargin = useRootMargin(offset);\n  var ref = useRef(null);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isIntersecting = _useState2[0],\n    setIsIntersecting = _useState2[1];\n  var _useInView = useInView({\n      rootMargin: rootMargin,\n      threshold: 0\n    }),\n    inViewRef = _useInView.ref,\n    entry = _useInView.entry;\n  var progressRootMargin = useMemo(function () {\n    return useProgressRootMargin(direction, offset, ref, innerHeight);\n  }, [direction, offset, ref, innerHeight]);\n  var _useInView2 = useInView({\n      rootMargin: progressRootMargin,\n      threshold: progressThreshold\n    }),\n    scrollProgressRef = _useInView2.ref,\n    scrollProgressEntry = _useInView2.entry;\n  var setRefs = useCallback(function (node) {\n    ref.current = node;\n    inViewRef(node);\n    scrollProgressRef(node);\n  }, [inViewRef, scrollProgressRef]);\n  React__default.useEffect(function () {\n    if (isIntersecting) {\n      var _scrollProgressEntry$ = scrollProgressEntry.target.getBoundingClientRect(),\n        height = _scrollProgressEntry$.height,\n        top = _scrollProgressEntry$.top;\n      var progress = Math.min(1, Math.max(0, (window.innerHeight * offset - top) / height));\n      onStepProgress && onStepProgress({\n        progress: progress,\n        scrollamaId: scrollamaId,\n        data: data,\n        element: scrollProgressEntry.target,\n        entry: scrollProgressEntry,\n        direction: direction\n      });\n    }\n  }, [scrollProgressEntry]);\n  React__default.useEffect(function () {\n    if (entry && !entry.isIntersecting && isIntersecting) {\n      onStepExit({\n        element: entry.target,\n        scrollamaId: scrollamaId,\n        data: data,\n        entry: entry,\n        direction: direction\n      });\n      setIsIntersecting(false);\n      handleSetLastScrollTop(scrollTop);\n    } else if (entry && entry.isIntersecting && !isIntersecting) {\n      setIsIntersecting(true);\n      onStepEnter({\n        element: entry.target,\n        scrollamaId: scrollamaId,\n        data: data,\n        entry: entry,\n        direction: direction\n      });\n      handleSetLastScrollTop(scrollTop);\n    }\n  }, [entry]);\n  return /*#__PURE__*/React__default.cloneElement(React__default.Children.only(children), {\n    'data-react-scrollama-id': scrollamaId,\n    ref: setRefs,\n    entry: entry\n  });\n};\nexport { Scrollama, Step };","map":{"version":3,"names":["isOffsetInPixels","offset","includes","markerStyles","position","left","width","height","borderTop","zIndex","offsetTextStyles","fontSize","fontFamily","margin","padding","useTop","offsetInPixels","concat","DebugOffset","_ref","top","React__default","createElement","style","_objectSpread2","createThreshold","theta","count","Math","ceil","t","ratio","i","push","Scrollama","props","debug","children","_props$offset","_props$onStepEnter","onStepEnter","_props$onStepExit","onStepExit","_props$onStepProgress","onStepProgress","_props$threshold","threshold","isOffsetDefinedInPixels","_useState","useState","_useState2","_slicedToArray","lastScrollTop","setLastScrollTop","_useState3","_useState4","windowInnerHeight","setWindowInnerHeight","handleSetLastScrollTop","scrollTop","handleWindowResize","e","window","innerHeight","useEffect","addEventListener","removeEventListener","isBrowser","offsetValue","replace","progressThreshold","useMemo","Fragment","Children","map","child","cloneElement","scrollamaId","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_elements$get","inView","isIntersecting","some","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","unobserve","splice","indexOf","length","delete","size","disconnect","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","React","useRef","state","setState","current","setRef","useCallback","node","result","ref","useRootMargin","useProgressRootMargin","direction","offsetHeight","Step","data","document","documentElement","setIsIntersecting","_useInView","inViewRef","progressRootMargin","_useInView2","scrollProgressRef","scrollProgressEntry","setRefs","_scrollProgressEntry$","progress","min","max","only"],"sources":["/Users/heewonkim/Desktop/portfolio/my-portfolio/node_modules/react-scrollama/src/utils.js","/Users/heewonkim/Desktop/portfolio/my-portfolio/node_modules/react-scrollama/src/DebugOffset.js","/Users/heewonkim/Desktop/portfolio/my-portfolio/node_modules/react-scrollama/src/Scrollama.js","/Users/heewonkim/Desktop/portfolio/my-portfolio/node_modules/react-scrollama/node_modules/react-intersection-observer/react-intersection-observer.modern.mjs","/Users/heewonkim/Desktop/portfolio/my-portfolio/node_modules/react-scrollama/src/Step.js"],"sourcesContent":["export const isOffsetInPixels = offset => typeof offset === 'string' && offset.includes('px');\n","import React from 'react';\nimport { isOffsetInPixels } from './utils';\n\nconst markerStyles = {\n  position: 'fixed',\n  left: 0,\n  width: '100%',\n  height: 0,\n  borderTop: '2px dashed black',\n  zIndex: 9999,\n};\nconst offsetTextStyles = {\n  fontSize: '12px',\n  fontFamily: 'monospace',\n  margin: 0,\n  padding: 6,\n};\n\nconst useTop = offset => {\n  const offsetInPixels = isOffsetInPixels(offset);\n  if(offsetInPixels) {\n    return offset;\n  } else {\n    return `${offset * 100}%`\n  }\n}\n\nconst DebugOffset = ({ offset }) => {\n  const top = useTop(offset);\n  return (\n    <div style={{ ...markerStyles, top, }}>\n      <p style={offsetTextStyles}>trigger: {offset}</p>\n    </div>\n  );\n}\n\nexport default DebugOffset;\n","import React, { useMemo, useState } from 'react';\nimport DebugOffset from './DebugOffset';\nimport { isOffsetInPixels } from './utils';\n\nconst createThreshold = (theta, height) => {\n  const count = Math.ceil(height / theta);\n  const t = [];\n  const ratio = 1 / count;\n  for (let i = 0; i <= count; i += 1) {\n    t.push(i * ratio);\n  }\n  return t;\n};\n\nconst Scrollama = props => {\n  const {\n    debug,\n    children,\n    offset = 0.3,\n    onStepEnter = () => {},\n    onStepExit = () => {},\n    onStepProgress = null,\n    threshold = 4,\n  } = props;\n  const isOffsetDefinedInPixels = isOffsetInPixels(offset)\n  const [lastScrollTop, setLastScrollTop] = useState(0);\n  const [windowInnerHeight, setWindowInnerHeight] = useState(null);\n\n  const handleSetLastScrollTop = (scrollTop) => {\n    setLastScrollTop(scrollTop);\n  };\n\n  const handleWindowResize = (e) => {\n    setWindowInnerHeight(window.innerHeight)\n  }\n\n  React.useEffect(() => {\n    if(isOffsetDefinedInPixels) {\n      window.addEventListener('resize', handleWindowResize);\n      return () => {\n        window.removeEventListener('resize', handleWindowResize);\n      };\n    }\n  }, []);\n\n  const isBrowser = typeof window !== \"undefined\";\n  const innerHeight = isBrowser ? (windowInnerHeight || window.innerHeight) : 0;\n\n  const offsetValue = isOffsetDefinedInPixels\n    ? (+offset.replace('px', '') / innerHeight)\n    : offset;\n\n  const progressThreshold = useMemo(() => createThreshold(threshold, innerHeight), [innerHeight]);\n\n  return (\n    <React.Fragment>\n      {debug && <DebugOffset offset={offset} />}\n      {React.Children.map(children, (child, i) => {\n        return React.cloneElement(child, {\n          scrollamaId: `react-scrollama-${i}`,\n          offset: offsetValue,\n          onStepEnter,\n          onStepExit,\n          onStepProgress,\n          lastScrollTop,\n          handleSetLastScrollTop,\n          progressThreshold,\n          innerHeight\n        });\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default Scrollama;\n","import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  const unobserve = React.useRef();\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n\n  callback.current = onChange;\n  const setRef = React.useCallback(node => {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, (inView, entry) => {\n        setState({\n          inView,\n          entry\n        });\n        if (callback.current) callback.current(inView, entry);\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root,\n        rootMargin,\n        threshold,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n","import React, { useState, useMemo, useCallback, useRef } from 'react';\nimport { useInView } from 'react-intersection-observer';\n\nconst useRootMargin = offset => {\n  return `-${offset * 100}% 0px -${100 - offset * 100}% 0px`;\n}\n\nconst useProgressRootMargin = (direction, offset, node, innerHeight) => {\n  if (!node.current) return '0px';\n  const offsetHeight = (node.current.offsetHeight / innerHeight);\n  if (direction === 'down') return `${(offsetHeight - offset) * 100}% 0px ${(offset * 100) - 100}% 0px`;\n  return `-${offset * 100}% 0px ${(offsetHeight * 100) - (100 - (offset * 100))}% 0px`;\n}\n\nconst Step = props => {\n  const {\n    children,\n    data,\n    handleSetLastScrollTop,\n    lastScrollTop,\n    onStepEnter = () => {},\n    onStepExit = () => {},\n    onStepProgress = null,\n    offset,\n    scrollamaId,\n    progressThreshold,\n    innerHeight,\n  } = props;\n\n  const isBrowser = typeof window !== \"undefined\";\n  const scrollTop = isBrowser ? document.documentElement.scrollTop : 0;\n  const direction = lastScrollTop < scrollTop ? 'down' : 'up';\n\n  const rootMargin = useRootMargin(offset);\n\n  const ref = useRef(null);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n\n  const {ref: inViewRef, entry} = useInView({\n    rootMargin,\n    threshold: 0,\n  });\n\n  const progressRootMargin = useMemo(\n    () => useProgressRootMargin(direction, offset, ref, innerHeight),\n    [direction, offset, ref, innerHeight]\n  );\n\n  const {ref: scrollProgressRef, entry: scrollProgressEntry} = useInView({\n    rootMargin: progressRootMargin,\n    threshold: progressThreshold,\n  });\n\n  const setRefs = useCallback(\n    (node) => {\n      ref.current = node;\n      inViewRef(node);\n      scrollProgressRef(node)\n    },\n    [inViewRef, scrollProgressRef],\n  );\n\n\n  React.useEffect(() => {\n    if (isIntersecting) {\n      const { height, top } = scrollProgressEntry.target.getBoundingClientRect();\n      const progress = Math.min(1, Math.max(0, (window.innerHeight * offset - top) / height));\n      onStepProgress &&\n      onStepProgress({\n        progress,\n        scrollamaId,\n        data,\n        element: scrollProgressEntry.target,\n        entry: scrollProgressEntry,\n        direction,\n      });\n    }\n  }, [scrollProgressEntry]);\n\n  React.useEffect(() => {\n    if (entry && !entry.isIntersecting && isIntersecting) {\n      onStepExit({ element: entry.target, scrollamaId, data, entry, direction });\n      setIsIntersecting(false);\n      handleSetLastScrollTop(scrollTop)\n    } else if (entry && entry.isIntersecting && !isIntersecting) {\n      setIsIntersecting(true);\n      onStepEnter({ element: entry.target, scrollamaId, data, entry, direction});\n      handleSetLastScrollTop(scrollTop)\n    }\n  }, [entry]);\n\n  return React.cloneElement(React.Children.only(children), {\n    'data-react-scrollama-id': scrollamaId,\n    ref: setRefs,\n    entry,\n  });\n};\n\nexport default Step;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}