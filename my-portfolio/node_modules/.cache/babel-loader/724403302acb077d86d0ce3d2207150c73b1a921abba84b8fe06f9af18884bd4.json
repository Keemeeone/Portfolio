{"ast":null,"code":"var _jsxFileName = \"/Users/heewonkim/Desktop/Portfolio/my-portfolio/src/components/AIchat/AIchat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField, Button, Container, Paper, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"your-api-key\"; // API 키를 여기에 추가하세요\n\n// 레주메의 일부 기본 정보\nconst resumeInfo = {\n  name: \"Heewon Kim\",\n  email: \"khw0285@gmail.com\",\n  linkedin: \"https://www.linkedin.com/in/heewon-kim-hkim/\",\n  github: \"https://github.com/Keemeeone\",\n  portfolio: \"https://keemeeone.github.io/\",\n  summary: \"Highly motivated and detail-oriented software developer with strong communication skills and a passion for creating innovation. Adept at collaboration and driving projects from concept to completion.\",\n  toolsAndLanguages: \"Web Development | HTML5 | CSS | JavaScript | TypeScript | Microsoft Office | UI/UX | React | React-Native | Node.js | Postman | Git | Linux | Figma | FastAPI | JSON | Jira | Agile | Scrum | C | Java\",\n  experiences: [{\n    title: \"Back-end Developer\",\n    company: \"Wisconsin State Cartographer's Office\",\n    location: \"Madison, WI\",\n    date: \"Sept 2023 - Dec 2023\",\n    details: [\"Implemented an intuitive map interface, ditching the need for township expertise\", \"Transformed a complex set of 2,136 XML files into accessible formats (CSV, JSON) using Python. This data exporter unlocked new ways to use survey notes and boosted accessibility by 30%, saving development time\", \"Developed a FastAPI endpoint to return an array of URLs when multiple URLs are associated with a survey note\", \"Implemented an accurate URL retrieval system using DTR and line number inputs, streamlining data access\"]\n  }, {\n    title: \"Co-Founder & Front-end Developer\",\n    company: \"College Mate App\",\n    location: \"Madison, WI\",\n    date: \"Oct 2022 - Present\",\n    details: [\"Front-end development of the College Mate App, a tool designed to build a connected community among the University of Wisconsin–Madison students\", \"Developed user-friendly interfaces and interactive features of the app using React, React Native, RESTful APIs, TypeScript, and HTML/CSS\", \"Implemented responsive design to make College Mate a satisfaction to use on any device, from tiny mobile screens to sprawling monitors\", \"Slashed initial page load times by a whopping 40%. pre-rendered lightweight wrapper pages so that users can see all the pages within 2 seconds\"]\n  }\n  // 다른 경험들...\n  ],\n  education: [{\n    institution: \"University of Wisconsin - Madison\",\n    degree: \"Bachelor of Computer Science\",\n    date: \"Jan 2021 - Dec 2023\",\n    relevantCourses: [\"Object-oriented programming\", \"Data structures\", \"Machine organization and programming\", \"Operating system\", \"Front-end designing\", \"Software quality testing\", \"Building user interfaces\", \"Human-computer interaction\", \"Discrete mathematics propositioning\", \"Algorithm\"]\n  }, {\n    institution: \"Madison Area Technical College\",\n    date: \"Sept 2019 - Dec 2020\"\n  }],\n  coverLetter: `\n      Dear Human Resources,\n      // 여기에 커버레터 내용 추가\n      Sincerely, \n      Heewon Kim\n    `\n};\n\n// 레주메 정보를 사용하여 systemMessage를 생성\nconst systemMessage = {\n  \"role\": \"system\",\n  \"content\": `Explain things like you're talking to ${resumeInfo.name}, a software professional with ${resumeInfo.experience}.`\n};\nfunction AIchat() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const handleSend = async () => {\n    const newMessage = {\n      message: userInput,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n    setUserInput(''); // Clear the input field after sending the message\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessages]\n    };\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Bearer \" + API_KEY,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n      const data = await response.json();\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n    } catch (error) {\n      console.error(\"Error processing message to ChatGPT:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        style: {\n          padding: \"20px\",\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          gutterBottom: true,\n          children: \"Chat with ChatGPT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              marginBottom: \"8px\"\n            },\n            children: [message.sender, \": \", message.message]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          margin: \"normal\",\n          fullWidth: true,\n          id: \"message\",\n          label: \"Type message here\",\n          name: \"message\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), isTyping && /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            marginTop: \"8px\"\n          },\n          children: \"ChatGPT is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(AIchat, \"rhHMsGEpooLECoZDPIxUA9XGexE=\");\n_c = AIchat;\nexport default AIchat;\nvar _c;\n$RefreshReg$(_c, \"AIchat\");","map":{"version":3,"names":["React","useState","TextField","Button","Container","Paper","Typography","jsxDEV","_jsxDEV","API_KEY","resumeInfo","name","email","linkedin","github","portfolio","summary","toolsAndLanguages","experiences","title","company","location","date","details","education","institution","degree","relevantCourses","coverLetter","systemMessage","experience","AIchat","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","userInput","setUserInput","handleSend","newMessage","direction","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","apiRequestBody","response","fetch","method","headers","body","JSON","stringify","data","json","choices","error","console","className","children","component","maxWidth","elevation","style","padding","marginTop","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","i","marginBottom","margin","fullWidth","id","label","value","onChange","e","target","color","onClick","_c","$RefreshReg$"],"sources":["/Users/heewonkim/Desktop/Portfolio/my-portfolio/src/components/AIchat/AIchat.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { TextField, Button, Container, Paper, Typography } from '@mui/material';\n\nconst API_KEY = \"your-api-key\"; // API 키를 여기에 추가하세요\n\n// 레주메의 일부 기본 정보\nconst resumeInfo = {\n    name: \"Heewon Kim\",\n    email: \"khw0285@gmail.com\",\n    linkedin: \"https://www.linkedin.com/in/heewon-kim-hkim/\",\n    github: \"https://github.com/Keemeeone\",\n    portfolio: \"https://keemeeone.github.io/\",\n    summary: \"Highly motivated and detail-oriented software developer with strong communication skills and a passion for creating innovation. Adept at collaboration and driving projects from concept to completion.\",\n    toolsAndLanguages: \"Web Development | HTML5 | CSS | JavaScript | TypeScript | Microsoft Office | UI/UX | React | React-Native | Node.js | Postman | Git | Linux | Figma | FastAPI | JSON | Jira | Agile | Scrum | C | Java\",\n    experiences: [\n      {\n        title: \"Back-end Developer\",\n        company: \"Wisconsin State Cartographer's Office\",\n        location: \"Madison, WI\",\n        date: \"Sept 2023 - Dec 2023\",\n        details: [\n          \"Implemented an intuitive map interface, ditching the need for township expertise\",\n          \"Transformed a complex set of 2,136 XML files into accessible formats (CSV, JSON) using Python. This data exporter unlocked new ways to use survey notes and boosted accessibility by 30%, saving development time\",\n          \"Developed a FastAPI endpoint to return an array of URLs when multiple URLs are associated with a survey note\",\n          \"Implemented an accurate URL retrieval system using DTR and line number inputs, streamlining data access\"\n        ]\n      },\n      {\n        title: \"Co-Founder & Front-end Developer\",\n        company: \"College Mate App\",\n        location: \"Madison, WI\",\n        date: \"Oct 2022 - Present\",\n        details: [\n          \"Front-end development of the College Mate App, a tool designed to build a connected community among the University of Wisconsin–Madison students\",\n          \"Developed user-friendly interfaces and interactive features of the app using React, React Native, RESTful APIs, TypeScript, and HTML/CSS\",\n          \"Implemented responsive design to make College Mate a satisfaction to use on any device, from tiny mobile screens to sprawling monitors\",\n          \"Slashed initial page load times by a whopping 40%. pre-rendered lightweight wrapper pages so that users can see all the pages within 2 seconds\"\n        ]\n      },\n      // 다른 경험들...\n    ],\n    education: [\n      {\n        institution: \"University of Wisconsin - Madison\",\n        degree: \"Bachelor of Computer Science\",\n        date: \"Jan 2021 - Dec 2023\",\n        relevantCourses: [\n          \"Object-oriented programming\", \"Data structures\", \"Machine organization and programming\", \"Operating system\", \"Front-end designing\", \"Software quality testing\", \"Building user interfaces\", \"Human-computer interaction\", \"Discrete mathematics propositioning\", \"Algorithm\"\n        ]\n      },\n      {\n        institution: \"Madison Area Technical College\",\n        date: \"Sept 2019 - Dec 2020\"\n      }\n    ],\n    coverLetter: `\n      Dear Human Resources,\n      // 여기에 커버레터 내용 추가\n      Sincerely, \n      Heewon Kim\n    `\n  };\n  \n  // 레주메 정보를 사용하여 systemMessage를 생성\n  const systemMessage = {\n    \"role\": \"system\",\n    \"content\": `Explain things like you're talking to ${resumeInfo.name}, a software professional with ${resumeInfo.experience}.`\n  };\n\nfunction AIchat() {\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I'm ChatGPT! Ask me anything!\",\n      sentTime: \"just now\",\n      sender: \"ChatGPT\"\n    }\n  ]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [userInput, setUserInput] = useState('');\n\n  const handleSend = async () => {\n    const newMessage = {\n      message: userInput,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n    setUserInput(''); // Clear the input field after sending the message\n  };\n\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map((messageObject) => {\n      let role = (messageObject.sender === \"ChatGPT\") ? \"assistant\" : \"user\";\n      return { role: role, content: messageObject.message };\n    });\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [\n        systemMessage,\n        ...apiMessages\n      ]\n    };\n\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Bearer \" + API_KEY,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n\n      const data = await response.json();\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n    } catch (error) {\n      console.error(\"Error processing message to ChatGPT:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container component=\"main\" maxWidth=\"xs\">\n        <Paper elevation={3} style={{ padding: \"20px\", marginTop: \"20px\" }}>\n          <Typography variant=\"h5\" gutterBottom>\n            Chat with ChatGPT\n          </Typography>\n          <div>\n            {messages.map((message, i) => (\n              <Typography key={i} style={{ marginBottom: \"8px\" }}>\n                {message.sender}: {message.message}\n              </Typography>\n            ))}\n          </div>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            id=\"message\"\n            label=\"Type message here\"\n            name=\"message\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n            onClick={handleSend}\n          >\n            Send\n          </Button>\n          {isTyping && <Typography style={{ marginTop: \"8px\" }}>ChatGPT is typing...</Typography>}\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n\nexport default AIchat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}