{"ast":null,"code":"var _jsxFileName = \"/Users/heewonkim/Desktop/Portfolio/my-portfolio/src/components/Wrapper/Scroll.jsx\",\n  _s = $RefreshSig$();\n// Scroll.jsx\n/*\nSPDX-FileCopyrightText: © 2024 Heewon Kim <khw0285@gmail.com>\nSPDX-License-Identifier: MIT\n*/\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Header from \"../Header/Header\";\nimport Motion from \"./Motion\";\n\n/**\n * Scroll component handling vertical scrolling and displaying a Header.\n * @param {Object} props - Props for the Scroll component.\n * @param {React.Component[]} props.components - Array of React components to be displayed.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Scroll = ({\n  components\n}) => {\n  _s();\n  var _scrollRef$current, _scrollRef$current2;\n  const [activeIndex, setActiveIndex] = useState(0);\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const scrollRef = useRef();\n\n  // useEffect(() => {\n  //     const handleResize = () => {\n  //         if (scrollRef.current) {\n  //             const componentHeight = scrollRef.current.clientHeight;\n  //             const newIndex = Math.floor(scrollRef.current.scrollTop / componentHeight);\n  //             setActiveIndex(newIndex);\n  //         }\n  //     };\n\n  //     if (scrollRef.current) {\n  //         window.addEventListener(\"resize\", handleResize);\n\n  //         return () => {\n  //             window.removeEventListener(\"resize\", handleResize);\n  //         };\n  //     }\n  // }, []);\n\n  const handleScroll = () => {\n    if (scrollRef.current) {\n      const scrollTop = scrollRef.current.scrollTop;\n      const componentHeight = scrollRef.current.clientHeight;\n      const newIndex = scrollTop / componentHeight;\n      setActiveIndex(newIndex);\n      // 스크롤 위치 업데이트\n      setScrollPosition(scrollTop);\n    }\n  };\n\n  // const calculateOpacity = (index) => {\n  //     if (scrollRef.current) {\n  //         const componentHeight = scrollRef.current.clientHeight;\n  //         const distanceToComponent = Math.abs(scrollPosition - index * componentHeight);\n  //         const maxDistance = componentHeight * 0.5;\n\n  //         // Calculate opacity based on the distance to the component\n  //         const opacity = 1 - Math.min(distanceToComponent / maxDistance, 1);\n\n  //         return opacity;\n  //     }\n\n  //     // Default opacity if scrollRef.current is undefined\n  //     return 0;\n  // };\n\n  const scrollToComponent = index => {\n    if (scrollRef.current) {\n      const componentHeight = scrollRef.current.clientHeight;\n      scrollRef.current.scrollTo({\n        top: index * componentHeight,\n        behavior: \"smooth\"\n      });\n    }\n  };\n  const updateSlideState = index => {\n    scrollToComponent(index);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: scrollRef,\n    onScroll: handleScroll,\n    style: {\n      height: \"100vh\",\n      overflowY: \"scroll\",\n      scrollBehavior: \"smooth\",\n      scrollSnapType: 'y'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      orientation: 'vertical',\n      length: components.length,\n      clickHandler: updateSlideState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), scrollPosition !== 0 && /*#__PURE__*/_jsxDEV(Motion, {\n      scrollPosition: scrollPosition,\n      scrollHeight: (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollHeight,\n      clientHeight: (_scrollRef$current2 = scrollRef.current) === null || _scrollRef$current2 === void 0 ? void 0 : _scrollRef$current2.clientHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this), components.map((component, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"100vh\",\n        // opacity: index === activeIndex ? 1 : 0.2,\n        transform: index === activeIndex ? 'scale(1)' : 'scale(0)',\n        transition: \"transform 0.05s ease-in-out\",\n        scrollSnapAlign: 'center'\n      },\n      children: /*#__PURE__*/React.cloneElement(component, {\n        isActive: index === activeIndex,\n        scrollPosition,\n        activeIndex\n      })\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(Scroll, \"kjqohrim1IL3Re7wvnkce9o3tpk=\");\n_c = Scroll;\nexport default Scroll;\nvar _c;\n$RefreshReg$(_c, \"Scroll\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Header","Motion","jsxDEV","_jsxDEV","Scroll","components","_s","_scrollRef$current","_scrollRef$current2","activeIndex","setActiveIndex","scrollPosition","setScrollPosition","scrollRef","handleScroll","current","scrollTop","componentHeight","clientHeight","newIndex","scrollToComponent","index","scrollTo","top","behavior","updateSlideState","ref","onScroll","style","height","overflowY","scrollBehavior","scrollSnapType","children","orientation","length","clickHandler","fileName","_jsxFileName","lineNumber","columnNumber","scrollHeight","map","component","transform","transition","scrollSnapAlign","cloneElement","isActive","_c","$RefreshReg$"],"sources":["/Users/heewonkim/Desktop/Portfolio/my-portfolio/src/components/Wrapper/Scroll.jsx"],"sourcesContent":["// Scroll.jsx\n/*\nSPDX-FileCopyrightText: © 2024 Heewon Kim <khw0285@gmail.com>\nSPDX-License-Identifier: MIT\n*/\n\nimport React, { useState, useEffect, useRef } from \"react\";\n\nimport Header from \"../Header/Header\";\nimport Motion from \"./Motion\";\n\n/**\n * Scroll component handling vertical scrolling and displaying a Header.\n * @param {Object} props - Props for the Scroll component.\n * @param {React.Component[]} props.components - Array of React components to be displayed.\n */\nconst Scroll = ({ components }) => {\n    const [activeIndex, setActiveIndex] = useState(0);\n    const [scrollPosition, setScrollPosition] = useState(0);\n\n    const scrollRef = useRef();\n\n    // useEffect(() => {\n    //     const handleResize = () => {\n    //         if (scrollRef.current) {\n    //             const componentHeight = scrollRef.current.clientHeight;\n    //             const newIndex = Math.floor(scrollRef.current.scrollTop / componentHeight);\n    //             setActiveIndex(newIndex);\n    //         }\n    //     };\n\n    //     if (scrollRef.current) {\n    //         window.addEventListener(\"resize\", handleResize);\n\n    //         return () => {\n    //             window.removeEventListener(\"resize\", handleResize);\n    //         };\n    //     }\n    // }, []);\n\n    const handleScroll = () => {\n        if (scrollRef.current) {\n            const scrollTop = scrollRef.current.scrollTop;\n            const componentHeight = scrollRef.current.clientHeight;\n\n            const newIndex = scrollTop / componentHeight;\n            setActiveIndex(newIndex);\n            // 스크롤 위치 업데이트\n            setScrollPosition(scrollTop);\n        }\n    };\n\n    // const calculateOpacity = (index) => {\n    //     if (scrollRef.current) {\n    //         const componentHeight = scrollRef.current.clientHeight;\n    //         const distanceToComponent = Math.abs(scrollPosition - index * componentHeight);\n    //         const maxDistance = componentHeight * 0.5;\n\n    //         // Calculate opacity based on the distance to the component\n    //         const opacity = 1 - Math.min(distanceToComponent / maxDistance, 1);\n\n    //         return opacity;\n    //     }\n\n    //     // Default opacity if scrollRef.current is undefined\n    //     return 0;\n    // };\n\n    const scrollToComponent = (index) => {\n        if (scrollRef.current) {\n            const componentHeight = scrollRef.current.clientHeight;\n            scrollRef.current.scrollTo({\n                top: index * componentHeight,\n                behavior: \"smooth\",\n            });\n        }\n    };\n\n    const updateSlideState = (index) => {\n        scrollToComponent(index);\n    };\n\n    return (\n        <div\n            ref={scrollRef}\n            onScroll={handleScroll}\n            style={{\n                height: \"100vh\",\n                overflowY: \"scroll\",\n                scrollBehavior: \"smooth\",\n                scrollSnapType:'y',\n            }}\n        >\n            <Header\n                orientation={'vertical'}\n                length={components.length}\n                clickHandler={updateSlideState}\n            />\n            {scrollPosition !== 0 && (\n                <Motion\n                    scrollPosition={scrollPosition}\n                    scrollHeight={scrollRef.current?.scrollHeight}\n                    clientHeight={scrollRef.current?.clientHeight}\n                />\n            )}\n            \n            {components.map((component, index) => (\n                <div\n                    key={index}\n                    style={{\n                        height: \"100vh\",\n                        // opacity: index === activeIndex ? 1 : 0.2,\n                        transform: index === activeIndex ? 'scale(1)' : 'scale(0)',\n                        transition: \"transform 0.05s ease-in-out\",\n                        scrollSnapAlign:'center'\n                    }}\n                >\n                    {React.cloneElement(component, { isActive: index === activeIndex, scrollPosition,activeIndex })}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Scroll;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}