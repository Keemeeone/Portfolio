{"ast":null,"code":"var _jsxFileName = \"/Users/heewonkim/Desktop/Portfolio/my-portfolio/src/components/AIchat/AIchat.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { TextField, Button, Container, Paper, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire('dotenv').config();\nconsole.log(process.env.VITE_OPENAI_API_KEY);\nconst API_KEY = process.env.OPENAI_API_KEY;\nconst systemMessage = {\n  \"role\": \"system\",\n  \"content\": \"Remember about Heewon Kim, an ambitious and detail-oriented software developer, can be reached via email at khw0285@gmail.com. His professional profile can be viewed on LinkedIn (https://www.linkedin.com/in/heewon-kim-hkim/) and his projects are showcased on GitHub (https://github.com/Keemeeone). A comprehensive portfolio is available at https://keemeeone.github.io/. In summary, Heewon is a highly motivated individual with excellent communication skills, dedicated to fostering innovation. Proficient in various tools and languages including HTML5, CSS, JavaScript, TypeScript, React, Node.js, and more, he excels in collaborative environments and has a proven track record of driving projects from concept to completion. Heewon's experiences include a role as a Back-end Developer at the Wisconsin State Cartographer's Office, where he implemented an intuitive map interface and transformed complex XML files into accessible formats, significantly improving data accessibility. He also developed a FastAPI endpoint and an accurate URL retrieval system. As the Co-Founder and Front-end Developer of the College Mate App, Heewon designed user-friendly interfaces, implemented interactive features using React and React Native, and optimized page load times by 40%. In addition, he co-founded the Google Developer Club, organizing workshops and fostering a collaborative and innovative community. In the role of Product Manager and Back-end Developer at With U, Heewon led the development of a community app dedicated to saving abandoned dogs. He ensured seamless back-end operations, forged strong partnerships, and created a user experience aligned with the app's mission. At the CheeseHacks Hackathon, Heewon served as the Lead Developer (Front-end), collaboratively creating an interactive web application that enhanced understanding of front-end and back-end interactions. Heewon holds a Bachelor of Computer Science from the University of Wisconsin - Madison, completing relevant courses in object-oriented programming, data structures, machine organization, operating systems, and more. He also attended Madison Area Technical College from September 2019 to December 2020.\"\n};\nfunction AIChat() {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const handleSend = async () => {\n    const newMessage = {\n      message: userInput,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setIsTyping(true);\n    await processMessageToChatGPT(newMessages);\n    setUserInput('');\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessages = chatMessages.map(messageObject => {\n      let role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessages]\n    };\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => data.json()).then(data => {\n      setMessages([...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setIsTyping(false);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      height: '50vh',\n      overflowY: 'scroll'\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        style: {\n          padding: \"20px\",\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          gutterBottom: true,\n          children: \"Chat with ChatGPT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxHeight: 'calc(50vh - 150px)',\n            overflowY: 'auto'\n          },\n          children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              marginBottom: \"8px\"\n            },\n            children: [message.sender, \": \", message.message]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"outlined\",\n          margin: \"normal\",\n          fullWidth: true,\n          id: \"message\",\n          label: \"Type message here\",\n          name: \"message\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this), isTyping && /*#__PURE__*/_jsxDEV(Typography, {\n          style: {\n            marginTop: \"8px\"\n          },\n          children: \"ChatGPT is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(AIChat, \"Ilk5ye7glXLaqIzTWtpeujzoJyg=\");\n_c = AIChat;\nexport default AIChat;\nvar _c;\n$RefreshReg$(_c, \"AIChat\");","map":{"version":3,"names":["useState","TextField","Button","Container","Paper","Typography","jsxDEV","_jsxDEV","require","config","console","log","process","env","VITE_OPENAI_API_KEY","API_KEY","OPENAI_API_KEY","systemMessage","AIChat","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","userInput","setUserInput","handleSend","newMessage","direction","newMessages","processMessageToChatGPT","chatMessages","apiMessages","map","messageObject","role","content","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","json","choices","className","style","height","overflowY","children","component","maxWidth","elevation","padding","marginTop","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","maxHeight","i","marginBottom","margin","fullWidth","id","label","name","value","onChange","e","target","color","onClick","_c","$RefreshReg$"],"sources":["/Users/heewonkim/Desktop/Portfolio/my-portfolio/src/components/AIchat/AIchat.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { TextField, Button, Container, Paper, Typography } from '@mui/material';\nrequire('dotenv').config();\n\nconsole.log(process.env.VITE_OPENAI_API_KEY);\n\nconst API_KEY = process.env.OPENAI_API_KEY;\n\nconst systemMessage = {\n  \"role\": \"system\",\n  \"content\": \"Remember about Heewon Kim, an ambitious and detail-oriented software developer, can be reached via email at khw0285@gmail.com. His professional profile can be viewed on LinkedIn (https://www.linkedin.com/in/heewon-kim-hkim/) and his projects are showcased on GitHub (https://github.com/Keemeeone). A comprehensive portfolio is available at https://keemeeone.github.io/. In summary, Heewon is a highly motivated individual with excellent communication skills, dedicated to fostering innovation. Proficient in various tools and languages including HTML5, CSS, JavaScript, TypeScript, React, Node.js, and more, he excels in collaborative environments and has a proven track record of driving projects from concept to completion. Heewon's experiences include a role as a Back-end Developer at the Wisconsin State Cartographer's Office, where he implemented an intuitive map interface and transformed complex XML files into accessible formats, significantly improving data accessibility. He also developed a FastAPI endpoint and an accurate URL retrieval system. As the Co-Founder and Front-end Developer of the College Mate App, Heewon designed user-friendly interfaces, implemented interactive features using React and React Native, and optimized page load times by 40%. In addition, he co-founded the Google Developer Club, organizing workshops and fostering a collaborative and innovative community. In the role of Product Manager and Back-end Developer at With U, Heewon led the development of a community app dedicated to saving abandoned dogs. He ensured seamless back-end operations, forged strong partnerships, and created a user experience aligned with the app's mission. At the CheeseHacks Hackathon, Heewon served as the Lead Developer (Front-end), collaboratively creating an interactive web application that enhanced understanding of front-end and back-end interactions. Heewon holds a Bachelor of Computer Science from the University of Wisconsin - Madison, completing relevant courses in object-oriented programming, data structures, machine organization, operating systems, and more. He also attended Madison Area Technical College from September 2019 to December 2020.\"\n};\n\nfunction AIChat() {\n    const [messages, setMessages] = useState([\n      {\n        message: \"Hello, I'm ChatGPT! Ask me anything!\",\n        sentTime: \"just now\",\n        sender: \"ChatGPT\"\n      }\n    ]);\n    const [isTyping, setIsTyping] = useState(false);\n    const [userInput, setUserInput] = useState('');\n  \n    const handleSend = async () => {\n      const newMessage = {\n        message: userInput,\n        direction: 'outgoing',\n        sender: \"user\"\n      };\n  \n      const newMessages = [...messages, newMessage];\n      setMessages(newMessages);\n  \n      setIsTyping(true);\n      await processMessageToChatGPT(newMessages);\n      setUserInput('');\n    };\n  \n    async function processMessageToChatGPT(chatMessages) {\n      let apiMessages = chatMessages.map((messageObject) => {\n        let role = (messageObject.sender === \"ChatGPT\") ? \"assistant\" : \"user\";\n        return { role: role, content: messageObject.message };\n      });\n  \n      const apiRequestBody = {\n        \"model\": \"gpt-3.5-turbo\",\n        \"messages\": [\n          systemMessage,\n          ...apiMessages\n        ]\n      };\n  \n      await fetch(\"https://api.openai.com/v1/chat/completions\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Authorization\": \"Bearer \" + API_KEY,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(apiRequestBody)\n        }).then((data) => data.json())\n        .then((data) => {\n          setMessages([...chatMessages, {\n            message: data.choices[0].message.content,\n            sender: \"ChatGPT\"\n          }]);\n          setIsTyping(false);\n        });\n    }\n  \n    return (\n        <div className=\"App\" style={{ height: '50vh', overflowY: 'scroll' }}>\n          <Container component=\"main\" maxWidth=\"xs\">\n            <Paper elevation={3} style={{ padding: \"20px\", marginTop: \"20px\" }}>\n              <Typography variant=\"h5\" gutterBottom>\n                Chat with ChatGPT\n              </Typography>\n              <div style={{ maxHeight: 'calc(50vh - 150px)', overflowY: 'auto' }}>\n                {messages.map((message, i) => (\n                  <Typography key={i} style={{ marginBottom: \"8px\" }}>\n                    {message.sender}: {message.message}\n                  </Typography>\n                ))}\n              </div>\n              <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                id=\"message\"\n                label=\"Type message here\"\n                name=\"message\"\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                onClick={handleSend}\n              >\n                Send\n              </Button>\n              {isTyping && <Typography style={{ marginTop: \"8px\" }}>ChatGPT is typing...</Typography>}\n            </Paper>\n          </Container>\n        </div>\n      );\n    }\n  \n  export default AIChat;\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}