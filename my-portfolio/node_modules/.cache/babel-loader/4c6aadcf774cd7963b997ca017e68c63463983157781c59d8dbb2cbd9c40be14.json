{"ast":null,"code":"var _jsxFileName = \"/Users/heewonkim/Desktop/portfolio/my-portfolio/src/components/Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = ({\n  children\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    // 함수를 통해 데이터를 가져오는 로직을 추가할 수 있습니다.\n    fetchData();\n  }, [page]);\n  useEffect(() => {\n    // 스크롤 이벤트를 감지하고 처리하는 함수를 등록합니다.\n    window.addEventListener(\"scroll\", handleScroll);\n\n    // 컴포넌트가 언마운트되었을 때 이벤트 리스너를 제거합니다.\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n  const handleScroll = () => {\n    // 스크롤이 페이지 하단에 도달하면 다음 페이지를 로드합니다.\n    if (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n      setPage(prevPage => prevPage + 1);\n    }\n  };\n  const fetchData = () => {\n    // 페이지에 따라 필요한 데이터를 가져오는 로직을 추가합니다.\n    // 이 예제에서는 간단히 샘플 데이터를 추가합니다.\n    const newData = Array.from({\n      length: 10\n    }, (_, index) => `Item ${index + 1} (Page ${page})`);\n    setData(prevData => [...prevData, ...newData]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    id: \"main\",\n    role: \"main\",\n    children: [children, data.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: item\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"P5/yXQ38tP2W3u9BiLtOAtn3iGM=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Main","children","_s","data","setData","page","setPage","fetchData","window","addEventListener","handleScroll","removeEventListener","innerHeight","document","documentElement","scrollTop","offsetHeight","prevPage","newData","Array","from","length","_","index","prevData","id","role","map","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/heewonkim/Desktop/portfolio/my-portfolio/src/components/Main.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Main = ({ children }) => {\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    // 함수를 통해 데이터를 가져오는 로직을 추가할 수 있습니다.\n    fetchData();\n  }, [page]);\n\n  useEffect(() => {\n    // 스크롤 이벤트를 감지하고 처리하는 함수를 등록합니다.\n    window.addEventListener(\"scroll\", handleScroll);\n\n    // 컴포넌트가 언마운트되었을 때 이벤트 리스너를 제거합니다.\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  const handleScroll = () => {\n    // 스크롤이 페이지 하단에 도달하면 다음 페이지를 로드합니다.\n    if (\n      window.innerHeight + document.documentElement.scrollTop ===\n      document.documentElement.offsetHeight\n    ) {\n      setPage((prevPage) => prevPage + 1);\n    }\n  };\n\n  const fetchData = () => {\n    // 페이지에 따라 필요한 데이터를 가져오는 로직을 추가합니다.\n    // 이 예제에서는 간단히 샘플 데이터를 추가합니다.\n    const newData = Array.from({ length: 10 }, (_, index) => `Item ${index + 1} (Page ${page})`);\n    setData((prevData) => [...prevData, ...newData]);\n  };\n\n  return (\n    <main id=\"main\" role=\"main\">\n      {children}\n      {data.map((item, index) => (\n        <div key={index}>{item}</div>\n      ))}\n    </main>\n  );\n};\n\nexport default Main;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd;IACAU,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC;EAEVR,SAAS,CAAC,MAAM;IACd;IACAW,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEC,YAAY,CAAC;;IAE/C;IACA,OAAO,MAAM;MACXF,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAED,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,IACEF,MAAM,CAACI,WAAW,GAAGC,QAAQ,CAACC,eAAe,CAACC,SAAS,KACvDF,QAAQ,CAACC,eAAe,CAACE,YAAY,EACrC;MACAV,OAAO,CAAEW,QAAQ,IAAKA,QAAQ,GAAG,CAAC,CAAC;IACrC;EACF,CAAC;EAED,MAAMV,SAAS,GAAGA,CAAA,KAAM;IACtB;IACA;IACA,MAAMW,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,KAAM,QAAOA,KAAK,GAAG,CAAE,UAASlB,IAAK,GAAE,CAAC;IAC5FD,OAAO,CAAEoB,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAE,GAAGN,OAAO,CAAC,CAAC;EAClD,CAAC;EAED,oBACEnB,OAAA;IAAM0B,EAAE,EAAC,MAAM;IAACC,IAAI,EAAC,MAAM;IAAAzB,QAAA,GACxBA,QAAQ,EACRE,IAAI,CAACwB,GAAG,CAAC,CAACC,IAAI,EAAEL,KAAK,kBACpBxB,OAAA;MAAAE,QAAA,EAAkB2B;IAAI,GAAZL,KAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAC7B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAAC9B,EAAA,CA5CIF,IAAI;AAAAiC,EAAA,GAAJjC,IAAI;AA8CV,eAAeA,IAAI;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}